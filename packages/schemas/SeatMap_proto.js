'use strict'; // code generated by pbf v3.2.1

// SeatMap ========================================

var SeatMap = exports.SeatMap = {};

SeatMap.read = function (pbf, end) {
    return pbf.readFields(SeatMap._readField, {svgProps: null, seatProps: null, groups: []}, end);
};
SeatMap._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.svgProps = SeatMap.SVGProps.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.seatProps = SeatMap.SeatProps.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.groups.push(SeatMap.Group.read(pbf, pbf.readVarint() + pbf.pos));
};
SeatMap.write = function (obj, pbf) {
    if (obj.svgProps) pbf.writeMessage(1, SeatMap.SVGProps.write, obj.svgProps);
    if (obj.seatProps) pbf.writeMessage(2, SeatMap.SeatProps.write, obj.seatProps);
    if (obj.groups) for (var i = 0; i < obj.groups.length; i++) pbf.writeMessage(3, SeatMap.Group.write, obj.groups[i]);
};

// SeatMap.SVGProps ========================================

SeatMap.SVGProps = {};

SeatMap.SVGProps.read = function (pbf, end) {
    return pbf.readFields(SeatMap.SVGProps._readField, {width: 0, height: 0}, end);
};
SeatMap.SVGProps._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.width = pbf.readVarint(true);
    else if (tag === 2) obj.height = pbf.readVarint(true);
};
SeatMap.SVGProps.write = function (obj, pbf) {
    if (obj.width) pbf.writeVarintField(1, obj.width);
    if (obj.height) pbf.writeVarintField(2, obj.height);
};

// SeatMap.SeatProps ========================================

SeatMap.SeatProps = {};

SeatMap.SeatProps.read = function (pbf, end) {
    return pbf.readFields(SeatMap.SeatProps._readField, {r: 0, fill: "", stroke: "", strokeWidth: 0}, end);
};
SeatMap.SeatProps._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.r = pbf.readVarint(true);
    else if (tag === 2) obj.fill = pbf.readString();
    else if (tag === 3) obj.stroke = pbf.readString();
    else if (tag === 4) obj.strokeWidth = pbf.readVarint(true);
};
SeatMap.SeatProps.write = function (obj, pbf) {
    if (obj.r) pbf.writeVarintField(1, obj.r);
    if (obj.fill) pbf.writeStringField(2, obj.fill);
    if (obj.stroke) pbf.writeStringField(3, obj.stroke);
    if (obj.strokeWidth) pbf.writeVarintField(4, obj.strokeWidth);
};

// SeatMap.Seat ========================================

SeatMap.Seat = {};

SeatMap.Seat.read = function (pbf, end) {
    return pbf.readFields(SeatMap.Seat._readField, {id: 0, cx: 0, cy: 0}, end);
};
SeatMap.Seat._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint(true);
    else if (tag === 2) obj.cx = pbf.readVarint(true);
    else if (tag === 3) obj.cy = pbf.readVarint(true);
};
SeatMap.Seat.write = function (obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.cx) pbf.writeVarintField(2, obj.cx);
    if (obj.cy) pbf.writeVarintField(3, obj.cy);
};

// SeatMap.Group ========================================

SeatMap.Group = {};

SeatMap.Group.read = function (pbf, end) {
    return pbf.readFields(SeatMap.Group._readField, {seats: [], bounds: []}, end);
};
SeatMap.Group._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.seats.push(SeatMap.Seat.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 2) pbf.readPackedVarint(obj.bounds, true);
};
SeatMap.Group.write = function (obj, pbf) {
    if (obj.seats) for (var i = 0; i < obj.seats.length; i++) pbf.writeMessage(1, SeatMap.Seat.write, obj.seats[i]);
    if (obj.bounds) pbf.writePackedVarint(2, obj.bounds);
};
