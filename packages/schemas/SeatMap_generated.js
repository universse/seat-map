// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var SeatMap = SeatMap || {};

/**
 * @constructor
 */
SeatMap.Bounds = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SeatMap.Bounds}
 */
SeatMap.Bounds.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
SeatMap.Bounds.prototype.x1 = function() {
  return this.bb.readInt32(this.bb_pos);
};

/**
 * @returns {number}
 */
SeatMap.Bounds.prototype.y1 = function() {
  return this.bb.readInt32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
SeatMap.Bounds.prototype.x2 = function() {
  return this.bb.readInt32(this.bb_pos + 8);
};

/**
 * @returns {number}
 */
SeatMap.Bounds.prototype.y2 = function() {
  return this.bb.readInt32(this.bb_pos + 12);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @returns {flatbuffers.Offset}
 */
SeatMap.Bounds.createBounds = function(builder, x1, y1, x2, y2) {
  builder.prep(4, 16);
  builder.writeInt32(y2);
  builder.writeInt32(x2);
  builder.writeInt32(y1);
  builder.writeInt32(x1);
  return builder.offset();
};

/**
 * @constructor
 */
SeatMap.Seat = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SeatMap.Seat}
 */
SeatMap.Seat.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SeatMap.Seat=} obj
 * @returns {SeatMap.Seat}
 */
SeatMap.Seat.getRootAsSeat = function(bb, obj) {
  return (obj || new SeatMap.Seat).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SeatMap.Seat=} obj
 * @returns {SeatMap.Seat}
 */
SeatMap.Seat.getSizePrefixedRootAsSeat = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeatMap.Seat).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SeatMap.Seat.prototype.id = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
SeatMap.Seat.prototype.cx = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
SeatMap.Seat.prototype.cy = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SeatMap.Seat.startSeat = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} idOffset
 */
SeatMap.Seat.addId = function(builder, idOffset) {
  builder.addFieldOffset(0, idOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} cx
 */
SeatMap.Seat.addCx = function(builder, cx) {
  builder.addFieldInt32(1, cx, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} cy
 */
SeatMap.Seat.addCy = function(builder, cy) {
  builder.addFieldInt32(2, cy, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SeatMap.Seat.endSeat = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} idOffset
 * @param {number} cx
 * @param {number} cy
 * @returns {flatbuffers.Offset}
 */
SeatMap.Seat.createSeat = function(builder, idOffset, cx, cy) {
  SeatMap.Seat.startSeat(builder);
  SeatMap.Seat.addId(builder, idOffset);
  SeatMap.Seat.addCx(builder, cx);
  SeatMap.Seat.addCy(builder, cy);
  return SeatMap.Seat.endSeat(builder);
}

/**
 * @constructor
 */
SeatMap.Group = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SeatMap.Group}
 */
SeatMap.Group.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SeatMap.Group=} obj
 * @returns {SeatMap.Group}
 */
SeatMap.Group.getRootAsGroup = function(bb, obj) {
  return (obj || new SeatMap.Group).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SeatMap.Group=} obj
 * @returns {SeatMap.Group}
 */
SeatMap.Group.getSizePrefixedRootAsGroup = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeatMap.Group).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {SeatMap.Seat=} obj
 * @returns {SeatMap.Seat}
 */
SeatMap.Group.prototype.seats = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new SeatMap.Seat).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
SeatMap.Group.prototype.seatsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {SeatMap.Bounds=} obj
 * @returns {SeatMap.Bounds|null}
 */
SeatMap.Group.prototype.bounds = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new SeatMap.Bounds).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SeatMap.Group.startGroup = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} seatsOffset
 */
SeatMap.Group.addSeats = function(builder, seatsOffset) {
  builder.addFieldOffset(0, seatsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
SeatMap.Group.createSeatsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
SeatMap.Group.startSeatsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boundsOffset
 */
SeatMap.Group.addBounds = function(builder, boundsOffset) {
  builder.addFieldStruct(1, boundsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SeatMap.Group.endGroup = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} seatsOffset
 * @param {flatbuffers.Offset} boundsOffset
 * @returns {flatbuffers.Offset}
 */
SeatMap.Group.createGroup = function(builder, seatsOffset, boundsOffset) {
  SeatMap.Group.startGroup(builder);
  SeatMap.Group.addSeats(builder, seatsOffset);
  SeatMap.Group.addBounds(builder, boundsOffset);
  return SeatMap.Group.endGroup(builder);
}

/**
 * @constructor
 */
SeatMap.SVGProps = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SeatMap.SVGProps}
 */
SeatMap.SVGProps.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
SeatMap.SVGProps.prototype.width = function() {
  return this.bb.readInt32(this.bb_pos);
};

/**
 * @returns {number}
 */
SeatMap.SVGProps.prototype.height = function() {
  return this.bb.readInt32(this.bb_pos + 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} width
 * @param {number} height
 * @returns {flatbuffers.Offset}
 */
SeatMap.SVGProps.createSVGProps = function(builder, width, height) {
  builder.prep(4, 8);
  builder.writeInt32(height);
  builder.writeInt32(width);
  return builder.offset();
};

/**
 * @constructor
 */
SeatMap.SeatProps = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SeatMap.SeatProps}
 */
SeatMap.SeatProps.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SeatMap.SeatProps=} obj
 * @returns {SeatMap.SeatProps}
 */
SeatMap.SeatProps.getRootAsSeatProps = function(bb, obj) {
  return (obj || new SeatMap.SeatProps).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SeatMap.SeatProps=} obj
 * @returns {SeatMap.SeatProps}
 */
SeatMap.SeatProps.getSizePrefixedRootAsSeatProps = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeatMap.SeatProps).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SeatMap.SeatProps.prototype.r = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SeatMap.SeatProps.prototype.fill = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SeatMap.SeatProps.prototype.stroke = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
SeatMap.SeatProps.prototype.strokeWidth = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SeatMap.SeatProps.startSeatProps = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} r
 */
SeatMap.SeatProps.addR = function(builder, r) {
  builder.addFieldInt8(0, r, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} fillOffset
 */
SeatMap.SeatProps.addFill = function(builder, fillOffset) {
  builder.addFieldOffset(1, fillOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} strokeOffset
 */
SeatMap.SeatProps.addStroke = function(builder, strokeOffset) {
  builder.addFieldOffset(2, strokeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} strokeWidth
 */
SeatMap.SeatProps.addStrokeWidth = function(builder, strokeWidth) {
  builder.addFieldInt8(3, strokeWidth, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SeatMap.SeatProps.endSeatProps = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} r
 * @param {flatbuffers.Offset} fillOffset
 * @param {flatbuffers.Offset} strokeOffset
 * @param {number} strokeWidth
 * @returns {flatbuffers.Offset}
 */
SeatMap.SeatProps.createSeatProps = function(builder, r, fillOffset, strokeOffset, strokeWidth) {
  SeatMap.SeatProps.startSeatProps(builder);
  SeatMap.SeatProps.addR(builder, r);
  SeatMap.SeatProps.addFill(builder, fillOffset);
  SeatMap.SeatProps.addStroke(builder, strokeOffset);
  SeatMap.SeatProps.addStrokeWidth(builder, strokeWidth);
  return SeatMap.SeatProps.endSeatProps(builder);
}

/**
 * @constructor
 */
SeatMap.SeatMap = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SeatMap.SeatMap}
 */
SeatMap.SeatMap.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SeatMap.SeatMap=} obj
 * @returns {SeatMap.SeatMap}
 */
SeatMap.SeatMap.getRootAsSeatMap = function(bb, obj) {
  return (obj || new SeatMap.SeatMap).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SeatMap.SeatMap=} obj
 * @returns {SeatMap.SeatMap}
 */
SeatMap.SeatMap.getSizePrefixedRootAsSeatMap = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SeatMap.SeatMap).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {SeatMap.SVGProps=} obj
 * @returns {SeatMap.SVGProps|null}
 */
SeatMap.SeatMap.prototype.svgProps = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new SeatMap.SVGProps).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {SeatMap.SeatProps=} obj
 * @returns {SeatMap.SeatProps|null}
 */
SeatMap.SeatMap.prototype.seatProps = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new SeatMap.SeatProps).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {SeatMap.Group=} obj
 * @returns {SeatMap.Group}
 */
SeatMap.SeatMap.prototype.groups = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new SeatMap.Group).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
SeatMap.SeatMap.prototype.groupsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SeatMap.SeatMap.startSeatMap = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} svgPropsOffset
 */
SeatMap.SeatMap.addSvgProps = function(builder, svgPropsOffset) {
  builder.addFieldStruct(0, svgPropsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} seatPropsOffset
 */
SeatMap.SeatMap.addSeatProps = function(builder, seatPropsOffset) {
  builder.addFieldOffset(1, seatPropsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} groupsOffset
 */
SeatMap.SeatMap.addGroups = function(builder, groupsOffset) {
  builder.addFieldOffset(2, groupsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
SeatMap.SeatMap.createGroupsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
SeatMap.SeatMap.startGroupsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SeatMap.SeatMap.endSeatMap = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
SeatMap.SeatMap.finishSeatMapBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
SeatMap.SeatMap.finishSizePrefixedSeatMapBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} svgPropsOffset
 * @param {flatbuffers.Offset} seatPropsOffset
 * @param {flatbuffers.Offset} groupsOffset
 * @returns {flatbuffers.Offset}
 */
SeatMap.SeatMap.createSeatMap = function(builder, svgPropsOffset, seatPropsOffset, groupsOffset) {
  SeatMap.SeatMap.startSeatMap(builder);
  SeatMap.SeatMap.addSvgProps(builder, svgPropsOffset);
  SeatMap.SeatMap.addSeatProps(builder, seatPropsOffset);
  SeatMap.SeatMap.addGroups(builder, groupsOffset);
  return SeatMap.SeatMap.endSeatMap(builder);
}

// Exports for Node.js and RequireJS
this.SeatMap = SeatMap;
